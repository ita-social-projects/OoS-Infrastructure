# Default values for outofschool.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global: {}

nameOverride: ""
fullnameOverride: ""

commonLabels:
  tier: backend
  service: identity

image:
  fullTagOverride: ""
  pullPolicy: IfNotPresent

deploy:
  containerPort: 8080
  extraObjects:
  - apiVersion: cert-manager.io/v1
    kind: Certificate
    metadata:
      name: authserver-certificates
      namespace: default
    spec:
      dnsNames:
      - authserver-webapp
      - authserver-webapp.default.svc
      - authserver-webapp.default.svc.cluster.local
      duration: 2160h0m0s
      issuerRef:
        kind: Issuer
        name: oos-issuer
      renewBefore: 168h0m0s
      secretName: authserver-certificates

configuration:
  extraEnvironment:
    ASPNETCORE_ENVIRONMENT: Kubernetes
    ASPNETCORE_URLS: http://0.0.0.0:$(PORT);http://0.0.0.0:9000
    ConnectionStringsOverride__DefaultConnection__UserId: oos
    ElasticApm__ServiceVersion: $(AppDefaults__Version)
    SERVICE_BINDING_ROOT: /workspace/bindings
  extraEnvVarsSecret: "authserver-secrets"
  secrets:
  - type: env
    name: mysql-api-auth
    keys:
    - key: IDENTITY_PASSWORD
      envKey: ConnectionStringsOverride__DefaultConnection__Password
      upper: false
  - type: env
    name: eck-stack-eck-apm-server-apm-token
    keys:
    - key: secret-token
      envKey: ElasticApm__SecretToken
      upper: false
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/issuer: "letsencrypt"
    cert-manager.io/duration: 2160h0m0s
    cert-manager.io/renew-before: 168h0m0s
    # This is only needed if we're not using a separate health port and use the path rule: /(?!.*(?:healthz))(.*)
    # nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/rewrite-target: /$2
  hosts:
    - host: "replace_me"
      paths:
        - path: /auth(/|$)(.*)
          pathType: ImplementationSpecific
    - host: "replace_me_staging"
      paths:
        - path: /auth(/|$)(.*)
          pathType: ImplementationSpecific
  tls:
  - secretName: authserver-tls
    hosts:
    - replace_me
  - secretName: oos-staging-tls
    hosts:
    - replace_me_staging

resources:
  limits:
    cpu: 500m
    memory: 768Mi
  requests:
    cpu: 100m
    memory: 384Mi

storage:
  extraVolumes:
  - name: authserver-certificates
    secret:
      secretName: authserver-certificates
  - name: apm-certs
    secret:
      secretName: eck-stack-eck-apm-server-apm-http-certs-public
  - name: binding
    emptyDir: {}

  extraVolumeMounts:
  - name: authserver-certificates
    mountPath: "/etc/openiddict"
    readOnly: true
  - name: apm-certs
    mountPath: "/workspace/apm/certs"
    readOnly: true
  - name: binding
    mountPath: /workspace/bindings/ca-certificates

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 2
  targetCPU: 60
  targetMemory: 80

readinessProbe:
  enabled: true
  port: 9000
  path: "/healthz/ready"
  initialDelaySeconds: 30
  timeoutSeconds: 2
  periodSeconds: 20
  failureThreshold: 3
  successThreshold: 1

serviceAccount:
  imagePullSecrets:
  - name: outofschool-gcp-pull-secrets

initContainers:
  - name: init-myservice
    image: busybox:1.36
    command:
      - sh
      - -c
      - "echo ca-certificates > /workspace/bindings/ca-certificates/type; cp /workspace/apm/certs/*.crt /workspace/bindings/ca-certificates"
    volumeMounts:
      - name: apm-certs
        mountPath: "/workspace/apm/certs"
        readOnly: true
      - name: binding
        mountPath: /workspace/bindings/ca-certificates

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: "statefulset.kubernetes.io/pod-name"
            operator: In
            values:
              - elasticsearch-es-elastic-0
              - mysql-0
        topologyKey: kubernetes.io/hostname

