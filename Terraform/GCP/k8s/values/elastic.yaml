# TODO: Think how to make it simpler so it can be moved to Elastic PostStart
elasticConfigJob:
  roles:
    outofschool:
      cluster:
        - monitor
      indices:
        - names:
            - workshop
          privileges:
            - read
            - write
            - delete
            - create_index
            - view_index_metadata
            - manage
          allow_restricted_indices: false
      applications:
        - application: kibana-.kibana
          privileges:
            - space_read
          resources:
            - space:default
      metadata:
        version: 2
  secret: elasticsearch-credentials

elasticsearch:
  enabled: true

  replicas: 1
  protocol: https
  clusterHealthCheckParams: "wait_for_status=yellow&timeout=1s"
  esJavaOpts: "-Xms768m -Xmx768m"
  generateCertificate: false

  extraEnvs:
  - name: ELASTIC_PASSWORD
    valueFrom:
      secretKeyRef:
        name: elasticsearch-credentials
        key: password
  - name: ELASTIC_USERNAME
    valueFrom:
      secretKeyRef:
        name: elasticsearch-credentials
        key: username
  envFrom:
  - secretRef:
      name: pkcs12-password-secret

  esConfig:
    elasticsearch.yml: |
      xpack.security.enabled: true
      xpack.security.transport.ssl.enabled: true
      xpack.security.transport.ssl.verification_mode: certificate
      xpack.security.transport.ssl.keystore.type: PKCS12
      xpack.security.transport.ssl.keystore.path: /usr/share/elasticsearch/config/certs/keystore.p12
      xpack.security.transport.ssl.truststore.path: /usr/share/elasticsearch/config/certs/truststore.p12
      xpack.security.transport.ssl.truststore.password: ${password-key}
      xpack.security.transport.ssl.keystore.password: ${password-key}
      xpack.security.http.ssl.enabled: true
      xpack.security.http.ssl.truststore.path: /usr/share/elasticsearch/config/certs/truststore.p12
      xpack.security.http.ssl.keystore.path: /usr/share/elasticsearch/config/certs/keystore.p12
      xpack.security.http.ssl.truststore.password: ${password-key}
      xpack.security.http.ssl.keystore.password: ${password-key}
    elasticsearch-plugins.yml: |
      plugins:
        - id: analysis-icu
        - id: analysis-ukrainian
        - id: mapper-murmur3
        - id: mapper-size

  secretMounts:
    - name: elastic-certificates
      secretName: elastic-certificates
      path: /usr/share/elasticsearch/config/certs

  volumeClaimTemplate:
    accessModes: [ "ReadWriteOnce" ]
    storageClassName: "standard"
    resources:
      requests:
        storage: 10G

  resources:
    requests:
      cpu: "200m"
      memory: "512Mi"
    limits:
      cpu: "500m"
      memory: "1768Mi"

  rbac:
    create: true

  ingress:
    enabled: true
    annotations:
      cert-manager.io/issuer: "letsencrypt"
      cert-manager.io/duration: 2160h0m0s
      cert-manager.io/renew-before: 168h0m0s
    hosts:
      - host: ""
        paths:
          - path: /
    tls:
    - secretName: elastic-tls
      hosts: []

kibana:
  enabled: true
  elasticsearchHosts: "https://elasticsearch-master:9200"
  elasticsearchCredentialSecret: "elasticsearch-credentials"
  protocol: http
  healthCheckPath: "/api/status"

  secretMounts:
    - name: elastic-certificates
      secretName: elastic-certificates
      path: /usr/share/kibana/config/certs

  resources:
    requests:
      cpu: "200m"
      memory: "512Mi"
    limits:
      cpu: "500m"
      memory: "1256Mi"

  extraEnvs:
    - name: ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES
      value: "/usr/share/kibana/config/certs/ca.crt"
    - name: "ELASTICSEARCH_USERNAME"
      valueFrom:
        secretKeyRef:
          name: elasticsearch-credentials
          key: username
    - name: "ELASTICSEARCH_PASSWORD"
      valueFrom:
        secretKeyRef:
          name: elasticsearch-credentials
          key: password
    - name: "NODE_OPTIONS"
      value: "--max-old-space-size=1024"
    - name: "ENCRIPTION_KEY"
      valueFrom:
        secretKeyRef:
          name: kibana-encription-key
          key: ENCRIPTION_KEY

  ingress:
    enabled: true
    annotations:
      cert-manager.io/issuer: "letsencrypt"
      cert-manager.io/duration: 2160h0m0s
      cert-manager.io/renew-before: 168h0m0s
    hosts:
      - host: ""
        paths:
          - path: /
    tls:
    - secretName: kibana-tls
      hosts: []

  kibanaConfig:
    kibana.yml: |
      server.host: "0.0.0.0"
      server.shutdownTimeout: "5s"
      elasticsearch.hosts: [ "https://elasticsearch-master:9200" ]
      monitoring.ui.container.elasticsearch.enabled: true
      xpack.encryptedSavedObjects.encryptionKey: ${ENCRIPTION_KEY}

vector:
  enabled: true
  # fullnameOverride -- Override the full name of resources.
  fullnameOverride: vector

  # Each role is created with the following workloads:
  # Agent = DaemonSet
  # Aggregator = StatefulSet
  # Stateless-Aggregator = Deployment
  role: "Agent"

  image:
    repository: timberio/vector
    pullPolicy: IfNotPresent
    # Overrides the image tag, the default is `{image.version}-{image.base}`.
    tag: "0.30.0-debian"
    # Overrides the image version, the default is the Chart appVersion.
    version: ""
    base: "debian"

  resources:
    requests:
      cpu: 10m
      memory: 64M
    limits:
      memory: 512M

  service:
    ports:
      - port: 8686

  env:
    - name: "ES_ENDPOINT"
      value: "https://elasticsearch-master:9200"
    - name: "ES_USERNAME"
      valueFrom:
        secretKeyRef:
          name: elasticsearch-credentials
          key: username
    - name: "ES_PASSWORD"
      valueFrom:
        secretKeyRef:
          name: elasticsearch-credentials
          key: password

  extraVolumeMounts:
    - name: elastic-certificates
      mountPath: /usr/share/vector/elastic
      readOnly: true

  extraVolumes:
    - name: elastic-certificates
      secret:
        secretName: elastic-certificates

  # customConfig -- Override Vector's default configs, if used **all** options need to be specified. This section supports
  # using helm templates to populate dynamic values. See Vector's [configuration documentation](https://vector.dev/docs/reference/configuration/)
  # for all options.
  customConfig:
    data_dir: /vector-data-dir
    api:
      enabled: true
      address: 127.0.0.1:8686
      playground: false
    sources:
      file-syslog:
        type: file
        include:
          - /var/log/syslog
      k3s_logs:
        type: kubernetes_logs
    transforms:
      status_code:
        type: remap
        inputs:
          - k3s_logs
        source: |-
          del(.kubernetes.pod_labels)
          if .kubernetes.container_name == "webapi" && exists(parse_json!(.message).fields.StatusCode) {
            .kubernetes_webapi_StatusCode = parse_json!(.message).fields.StatusCode
          }
    sinks:
      es_logs:
        type: elasticsearch
        inputs:
          - status_code
          - file-syslog
        api_version: v7
        compression: none
        endpoints:
          - "${ES_ENDPOINT}"
        mode: bulk
        bulk:
          action: index
          index: vector-logs
        auth:
          strategy: basic
          user: "${ES_USERNAME}"
          password: "${ES_PASSWORD}"
        tls:
          ca_path : "/usr/share/vector/elastic/ca.crt"
          verify_certificate : true

metricbeat:
  enabled: true

  # last release kube-state-metrics
  kube-state-metrics:
    image:
      tag: v2.8.2

  daemonset:
    enabled: true
    extraEnvs:
      - name: "ES_ENDPOINT"
        value: "https://elasticsearch-master:9200"
      - name: "ES_USERNAME"
        valueFrom:
          secretKeyRef:
            name: elasticsearch-credentials
            key: username
      - name: "ES_PASSWORD"
        valueFrom:
          secretKeyRef:
            name: elasticsearch-credentials
            key: password

    hostNetworking: true

    extraVolumeMounts:
      - name: mtab
        mountPath: /etc/mtab
        readOnly: true

    extraVolumes:
      - name: mtab
        hostPath:
          path: /etc/mtab
          type: File

    metricbeatConfig:
      metricbeat.yml: |-
        metricbeat.modules:
          - module: kubernetes
            metricsets:
              - container
              - node
              - pod
              - system
              - volume
            period: 15s
            host: "${NODE_NAME}"
            hosts: ["https://${NODE_NAME}:10250"]
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            ssl.verification_mode: "none"
            processors:
            - add_kubernetes_metadata: ~
          - module: system
            period: 15s
            metricsets:
              - cpu
              - core
              - load
              - memory
              - network
              - process
            ticks: False
            enabled: True
            process.cgroups.enabled: True
            processes: ['.*']
            process.include_top_n:
              by_cpu: 5
              by_memory: 5
          - module: system
            metricsets:
              - diskio
              - uptime
            enabled: True
            period: 60s
          - module: system
            period: 1m
            metricsets:
              - filesystem
              - fsstat
            filesystem.ignore_types: []
            processors:
            - drop_event.when.regexp:
                system.filesystem.mount_point: '^/(sys|cgroup|proc|dev|etc|host|lib)($|/)'
          - module: kubernetes
            enabled: true
            metricsets:
              - event
        output.elasticsearch:
          hosts: "${ES_ENDPOINT}"
          username: '${ES_USERNAME}'
          password: '${ES_PASSWORD}'
          enabled: true
          ssl.certificate_authorities: ["/usr/share/metricbeat/certs/ca.crt"]
    secretMounts:
      - name: elasticsearch-master-certs
        secretName: elastic-certificates
        path: /usr/share/metricbeat/certs/
    securityContext:
      runAsUser: 0
      privileged: false
    resources:
      requests:
        cpu: "100m"
        memory: "100Mi"
      limits:
        cpu: "1000m"
        memory: "250Mi"

  deployment:
    extraEnvs:
      - name: "ES_ENDPOINT"
        value: "https://elasticsearch-master:9200"
      - name: "KIBANA_URL"
        value: "http://elastic-kibana:5601"
      - name: "ES_USERNAME"
        valueFrom:
          secretKeyRef:
            name: elasticsearch-credentials
            key: username
      - name: "ES_PASSWORD"
        valueFrom:
          secretKeyRef:
            name: elasticsearch-credentials
            key: password
      - name: "MYSQL_HOST"
        value: "tcp(mysql.default.svc:3306)/"
      - name: "REDIS_HOST"
        value: "redis-master.default.svc:6379"
      - name: "MYSQL_USER"
        valueFrom:
          secretKeyRef:
            name: elastic-metricbeat-mysql
            key: user
      - name: "REDIS_PASSWORD"
        valueFrom:
          secretKeyRef:
            name: redis-auth
            key: password
      - name: "MYSQL_PASSWORD"
        valueFrom:
          secretKeyRef:
            name: mysql-api-auth
            key: IDENTITY_PASSWORD
    metricbeatConfig:
      metricbeat.yml: |-
        metricbeat.modules:
          - module: kubernetes
            enabled: true
            metricsets:
              - state_node
              - state_deployment
              - state_daemonset
              - state_replicaset
              - state_pod
              - state_container
              - state_job
              - state_cronjob
              - state_resourcequota
              - state_statefulset
              - state_service
              - state_persistentvolume
              - state_persistentvolumeclaim
              - state_storageclass
            period: 15s
            add_metadata: true
            hosts: ["${KUBE_STATE_METRICS_HOSTS}"]
          - module: elasticsearch
            period: 60s
            hosts: ["${ES_ENDPOINT}"]
            username: "${ES_USERNAME}"
            password: "${ES_PASSWORD}"
            xpack.enabled: true
            ssl.certificate_authorities: ["/usr/share/metricbeat/certs/ca.crt"]
          - module: kibana
            period: 60s
            hosts:
              - "${KIBANA_URL}"
            username: "${ES_USERNAME}"
            password: "${ES_PASSWORD}"
            ssl:
              enable: false
            enabled: true
            xpack.enabled: true
          - module: mysql
            enabled: true
            metricsets: ["status"]
            hosts: ["${MYSQL_HOST}"]
            username: "${MYSQL_USER}"
            password: "${MYSQL_PASSWORD}"
          - module: redis
            metricsets: ["info", "keyspace"]
            enabled: true
            period: 15s
            # processors:
            #   - include_fields:
            #       fields: ["beat", "metricset", "redis.info.stats"]
            # Redis hosts
            hosts: ["${REDIS_HOST}"]
            password: "${REDIS_PASSWORD}"
        output.elasticsearch:
          hosts: "${ES_ENDPOINT}"
          username: '${ES_USERNAME}'
          password: '${ES_PASSWORD}'
          enabled: true
          allow_older_versions: true
          ssl.certificate_authorities: ["/usr/share/metricbeat/certs/ca.crt"]
    secretMounts:
      - name: elasticsearch-master-certs
        secretName: elastic-certificates
        path: /usr/share/metricbeat/certs/
    securityContext:
      runAsUser: 0
      privileged: false
    resources:
      requests:
        cpu: "100m"
        memory: "100Mi"
      limits:
        cpu: "1000m"
        memory: "200Mi"
    tolerations: []

  #Secrets
  secrets:
    - name: "mysql"
      value:
        user:

  # Replicas being used for the kube-state-metrics metricbeat deployment
  replicas: 1

  # Root directory where metricbeat will write data to in order to persist registry data across pod restarts (file position and other metadata).
  hostPathRoot: /var/lib

  image: "docker.elastic.co/beats/metricbeat"
  imageTag: "7.17.3"
  imagePullPolicy: "IfNotPresent"
  imagePullSecrets: []

  livenessProbe:
    exec:
      command:
        - sh
        - -c
        - |
          #!/usr/bin/env bash -e
          curl --fail 127.0.0.1:5066
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5

  readinessProbe:
    exec:
      command:
        - sh
        - -c
        - |
          #!/usr/bin/env bash -e
          metricbeat test output
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5

  clusterRoleRules:
    - apiGroups: [""]
      resources:
        - nodes
        - namespaces
        - events
        - pods
        - services
        - jobs
      verbs: ["get", "list", "watch"]
    - apiGroups: ["extensions"]
      resources:
        - replicasets
      verbs: ["get", "list", "watch"]
    - apiGroups: ["apps"]
      resources:
        - statefulsets
        - deployments
        - replicasets
      verbs: ["get", "list", "watch"]
    - apiGroups: [""]
      resources:
        - nodes/stats
      verbs: ["get"]
    - apiGroups:
        - ""
      resources:
        - nodes/stats
      verbs:
        - get
    - nonResourceURLs:
        - "/metrics"
      verbs:
        - get
