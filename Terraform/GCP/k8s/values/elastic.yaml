# TODO: Think how to make it simpler so it can be moved to Elastic PostStart
elasticConfigJob:
  roles:
    outofschool:
      cluster:
        - monitor
      indices:
        - names:
            - workshop
          privileges:
            - read
            - write
            - delete
            - create_index
            - view_index_metadata
            - manage
          allow_restricted_indices: false
      applications:
        - application: kibana-.kibana
          privileges:
            - space_read
          resources:
            - space:default
      metadata:
        version: 2
  secret: elasticsearch-credentials

generateCertificate: false

elasticsearch:
  replicas: 1
  protocol: http
  secretMounts:
    - name: elastic-certificates
      secretName: elastic-certificates
      path: /usr/share/elasticsearch/config/certs
  extraEnvs:
    - name: ELASTIC_PASSWORD
      valueFrom:
        secretKeyRef:
          name: elasticsearch-credentials
          key: password
    - name: ELASTIC_USERNAME
      valueFrom:
        secretKeyRef:
          name: elasticsearch-credentials
          key: username
  esJavaOpts: "-Xms512m -Xmx512m"
  volumeClaimTemplate:
    accessModes: [ "ReadWriteOnce" ]
    storageClassName: "standard"
    resources:
      requests:
        storage: 10G
  resources:
    requests:
      cpu: "200m"
      memory: "1Gi"
    limits:
      cpu: "500m"
      memory: "1Gi"
  rbac:
    create: true
  lifecycle: {}
  # preStop:
  #   exec:
  #     command: ["/bin/sh", "-c", "echo Hello from the postStart handler > /usr/share/message"]
  # postStart:
  #   exec:
  #     command:
  #       - bash
  #       - -c
  #       - |
  #         #!/bin/bash
  #         # Add a template to adjust number of shards/replicas
  #         TEMPLATE_NAME=my_template
  #         INDEX_PATTERN="logstash-*"
  #         SHARD_COUNT=8
  #         REPLICA_COUNT=1
  #         ES_URL=http://localhost:9200
  #         while [[ "$(curl -s -o /dev/null -w '%{http_code}\n' $ES_URL)" != "200" ]]; do sleep 1; done
  #         curl -XPUT "$ES_URL/_template/$TEMPLATE_NAME" -H 'Content-Type: application/json' -d'{"index_patterns":['\""$INDEX_PATTERN"\"'],"settings":{"number_of_shards":'$SHARD_COUNT',"number_of_replicas":'$REPLICA_COUNT'}}'
  # TODO: check if need this
  # Disable privileged init Container creation.
  # sysctlInitContainer:
  #   enabled: false
  # TODO: check if need this
  # Restrict the use of the memory-mapping when sysctlInitContainer is disabled.
  # esConfig:
  #   elasticsearch.yml: |
  #     node.store.allow_mmap: false
  ingress:
    enabled: true
    annotations:
      cert-manager.io/issuer: "letsencrypt"
      cert-manager.io/duration: 2160h0m0s
      cert-manager.io/renew-before: 168h0m0s
    hosts:
      - host: ""
        paths:
          - path: /
    tls:
    - secretName: elastic-tls
      hosts: []

kibana:
  enabled: true
  resources:
    requests:
      cpu: "200m"
      memory: "1Gi"
    limits:
      cpu: "500m"
      memory: "1Gi"
  extraEnvs:
    - name: 'ELASTICSEARCH_USERNAME'
      valueFrom:
        secretKeyRef:
          name: elasticsearch-credentials
          key: username
    - name: 'ELASTICSEARCH_PASSWORD'
      valueFrom:
        secretKeyRef:
          name: elasticsearch-credentials
          key: password
  ingress:
    enabled: true
    annotations:
      cert-manager.io/issuer: "letsencrypt"
      cert-manager.io/duration: 2160h0m0s
      cert-manager.io/renew-before: 168h0m0s
    hosts:
      - host: ""
        paths:
          - path: /
    tls:
    - secretName: kibana-tls
      hosts: []

vector:
  enabled: true
  
  # fullnameOverride -- Override the full name of resources.
  fullnameOverride: vector

  # Each role is created with the following workloads:
  # Agent = DaemonSet
  # Aggregator = StatefulSet
  # Stateless-Aggregator = Deployment
  role: "Agent"

  resources:
    requests:
      cpu: 10m
      memory: 64M
    limits:
      memory: 512M
  
  service:
    ports:
      - port: 8686
  
  env:
    - name: "ES_ENDPOINT" # helm set
    - name: "ES_USERNAME"
      valueFrom:
        secretKeyRef:
          name: elasticsearch-credentials
          key: username
    - name: "ES_PASSWORD"
      valueFrom:
        secretKeyRef:
          name: elasticsearch-credentials
          key: password

  # customConfig -- Override Vector's default configs, if used **all** options need to be specified. This section supports
  # using helm templates to populate dynamic values. See Vector's [configuration documentation](https://vector.dev/docs/reference/configuration/)
  # for all options.
  customConfig: 
    data_dir: /vector-data-dir
    api:
      enabled: false
      address: 127.0.0.1:8686
      playground: false
    sources:
      file-syslog:
        type: file
        include:
          - /var/log/syslog
      k3s_logs:
        type: kubernetes_logs
    # captures pod name logs
    transforms:
      pod_name:
        condition: starts_with(string!(.kubernetes.pod_name),"outofschool-webapi-")
        inputs:
        - k3s_logs
        type: filter
    sinks:
      es_logs:
        type: elasticsearch
        inputs:
          - k3s_logs
          - file-syslog
        api_version: v7
        compression: none
        endpoints:
          - "${ES_ENDPOINT}"
        mode: bulk
        bulk:
          action: index
          index: vector-logs-%F
        auth:
          strategy: basic
          user: "${ES_USERNAME}"
          password: "${ES_PASSWORD}"

metricbeat:
  enabled: true
  
  daemonset:
    # Include the daemonset
    enabled: true
    
    extraEnvs:
      - name: "ES_ENDPOINT" # helm set   
      - name: "ES_USERNAME"
        valueFrom:
          secretKeyRef:
            name: elasticsearch-credentials
            key: username
      - name: "ES_PASSWORD"
        valueFrom:
          secretKeyRef:
            name: elasticsearch-credentials
            key: password
    
    hostNetworking: true

    extraVolumeMounts: 
      - name: mtab
        mountPath: /etc/mtab
        readOnly: true
    
    extraVolumes: 
      - name: mtab
        hostPath:
          path: /etc/mtab
          type: File 
    
    metricbeatConfig:
      metricbeat.yml: |
        metricbeat.modules:
          - module: kubernetes
            metricsets:
              - container
              - node
              - pod
              - system
              - volume
            period: 15s
            host: "${NODE_NAME}"
            hosts: ["https://${NODE_NAME}:10250"]
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            ssl.verification_mode: "none"
            processors:
            - add_kubernetes_metadata: ~
          - module: kubernetes
            enabled: true
            metricsets:
              - event
          - module: system
            period: 15s
            metricsets:
              - cpu
              - core
              - load
              - memory
              - network
              - process
            ticks: False
            enabled: True
            process.cgroups.enabled: True
            processes: ['.*']
            process.include_top_n:
              by_cpu: 5
              by_memory: 5
          - module: system
            metricsets:
              - diskio
              - uptime
            enabled: True
            period: 60s
          - module: system
            period: 1m
            metricsets:
              - filesystem
              - fsstat
            filesystem.ignore_types: []  
            processors:
            - drop_event.when.regexp:
                system.filesystem.mount_point: '^/(sys|cgroup|proc|dev|etc|host|lib)($|/)'
        output.elasticsearch:
          hosts: "${ES_ENDPOINT}"
          username: '${ES_USERNAME}'
          password: '${ES_PASSWORD}'
          enabled: true
          allow_older_versions: true
    secretMounts:
      - name: elasticsearch-master-certs
        secretName: elastic-certificates
        path: /usr/share/metricbeat/certs/
    securityContext:
      runAsUser: 0
      privileged: false
    resources:
      requests:
        cpu: "100m"
        memory: "100Mi"
      limits:
        cpu: "1000m"
        memory: "200Mi"
    tolerations: []

  deployment:
    extraEnvs:
      - name: "ES_ENDPOINT"
        value: "http://elasticsearch-master.default.svc.cluster.local:9200"
      - name: "ES_USERNAME"
        valueFrom:
          secretKeyRef:
            name: elasticsearch-credentials
            key: username
      - name: "ES_PASSWORD"
        valueFrom:
          secretKeyRef:
            name: elasticsearch-credentials
            key: password

    metricbeatConfig:
      metricbeat.yml: |
        metricbeat.modules:
          - module: kubernetes
            enabled: true
            metricsets:
              - state_node
              - state_deployment
              - state_replicaset
              - state_pod
              - state_container
            period: 15s
            hosts: ["${KUBE_STATE_METRICS_HOSTS}"]
          - module: elasticsearch
            metricsets:
              - node
              - node_stats
            period: 60s
            hosts: ["${ES_ENDPOINT}"]
            username: "${ES_USERNAME}"
            password: "${ES_PASSWORD}"
            xpack.enabled: true
            #scope: node           
        output.elasticsearch:
          hosts: "${ES_ENDPOINT}"
          username: "${ES_USERNAME}"
          password: "${ES_PASSWORD}"
          enabled: true
          allow_older_versions: true
    secretMounts:
      - name: elasticsearch-master-certs
        secretName: elastic-certificates
        path: /usr/share/metricbeat/certs/
    securityContext:
      runAsUser: 0
      privileged: false
    resources:
      requests:
        cpu: "100m"
        memory: "100Mi"
      limits:
        cpu: "1000m"
        memory: "200Mi"
    tolerations: []

  # Replicas being used for the kube-state-metrics metricbeat deployment
  replicas: 1

  # Root directory where metricbeat will write data to in order to persist registry data across pod restarts (file position and other metadata).
  hostPathRoot: /var/lib

  image: "docker.elastic.co/beats/metricbeat"
  imageTag: "7.17.3"
  imagePullPolicy: "IfNotPresent"
  imagePullSecrets: []

  livenessProbe:
    exec:
      command:
        - sh
        - -c
        - |
          #!/usr/bin/env bash -e
          curl --fail 127.0.0.1:5066
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5

  readinessProbe:
    exec:
      command:
        - sh
        - -c
        - |
          #!/usr/bin/env bash -e
          metricbeat test output
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5

  clusterRoleRules:
    - apiGroups: [""]
      resources:
        - nodes
        - namespaces
        - events
        - pods
        - services
      verbs: ["get", "list", "watch"]
    - apiGroups: ["extensions"]
      resources:
        - replicasets
      verbs: ["get", "list", "watch"]
    - apiGroups: ["apps"]
      resources:
        - statefulsets
        - deployments
        - replicasets
      verbs: ["get", "list", "watch"]
    - apiGroups: [""]
      resources:
        - nodes/stats
      verbs: ["get"]
    - apiGroups:
        - ""
      resources:
        - nodes/stats
      verbs:
        - get
    - nonResourceURLs:
        - "/metrics"
      verbs:
        - get

